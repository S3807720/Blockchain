// <auto-generated />
using System;
using Blockchain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blockchain.Migrations
{
    [DbContext(typeof(BlockchainContext))]
    [Migration("20220125034925_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Blockchain.Models.BCApplication", b =>
                {
                    b.Property<int>("BCApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BCApplicationID"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BCApplicationID");

                    b.ToTable("BCApplications");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BCApplication");
                });

            modelBuilder.Entity("Blockchain.Models.BCFile", b =>
                {
                    b.Property<int>("BCFileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BCFileID"), 1L, 1);

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BCFileID");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Blockchain.Models.BCUser", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BCUser");
                });

            modelBuilder.Entity("Blockchain.Models.Login", b =>
                {
                    b.Property<string>("LoginID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nchar(8)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nchar(64)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LoginID");

                    b.HasIndex("UserID");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("Blockchain.Models.Property", b =>
                {
                    b.Property<int>("PropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BuildingDesignBCFileID")
                        .HasColumnType("int");

                    b.Property<string>("OwnerDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerLicense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SellerUserID")
                        .HasColumnType("int");

                    b.HasKey("PropertyID");

                    b.HasIndex("BuildingDesignBCFileID");

                    b.HasIndex("SellerUserID");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Blockchain.Models.Authority", b =>
                {
                    b.HasBaseType("Blockchain.Models.BCUser");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Authority");
                });

            modelBuilder.Entity("Blockchain.Models.Buyer", b =>
                {
                    b.HasBaseType("Blockchain.Models.BCUser");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AnnualIncome")
                        .HasColumnType("money");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DOB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employer")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Buyer");
                });

            modelBuilder.Entity("Blockchain.Models.LoanApplication", b =>
                {
                    b.HasBaseType("Blockchain.Models.BCApplication");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BuyerUserID")
                        .HasColumnType("int");

                    b.Property<bool?>("Decision")
                        .HasColumnType("bit");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("money");

                    b.Property<bool?>("PermitStatus")
                        .HasColumnType("bit");

                    b.HasIndex("BuyerUserID");

                    b.HasDiscriminator().HasValue("LoanApplication");
                });

            modelBuilder.Entity("Blockchain.Models.LoanDecision", b =>
                {
                    b.HasBaseType("Blockchain.Models.BCApplication");

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<int?>("BuyerUserID")
                        .HasColumnType("int")
                        .HasColumnName("LoanDecision_BuyerUserID");

                    b.Property<int>("LoanID")
                        .HasColumnType("int");

                    b.HasIndex("BuyerUserID");

                    b.HasDiscriminator().HasValue("LoanDecision");
                });

            modelBuilder.Entity("Blockchain.Models.PendingTransaction", b =>
                {
                    b.HasBaseType("Blockchain.Models.BCApplication");

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit");

                    b.Property<int>("BuyerID")
                        .HasColumnType("int");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PendingTransaction");
                });

            modelBuilder.Entity("Blockchain.Models.PermitApplication", b =>
                {
                    b.HasBaseType("Blockchain.Models.BCApplication");

                    b.Property<bool?>("Decision")
                        .HasColumnType("bit")
                        .HasColumnName("PermitApplication_Decision");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int")
                        .HasColumnName("PermitApplication_PropertyID");

                    b.HasIndex("PropertyID");

                    b.HasDiscriminator().HasValue("PermitApplication");
                });

            modelBuilder.Entity("Blockchain.Models.PermitDecision", b =>
                {
                    b.HasBaseType("Blockchain.Models.BCApplication");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PermitDecision_Address");

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit")
                        .HasColumnName("PermitDecision_Approved");

                    b.Property<int>("PermitID")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PermitDecision");
                });

            modelBuilder.Entity("Blockchain.Models.Seller", b =>
                {
                    b.HasBaseType("Blockchain.Models.BCUser");

                    b.HasDiscriminator().HasValue("Seller");
                });

            modelBuilder.Entity("Blockchain.Models.TransactionDecision", b =>
                {
                    b.HasBaseType("Blockchain.Models.BCApplication");

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit")
                        .HasColumnName("TransactionDecision_Accepted");

                    b.Property<int>("PendingTransactionsID")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("TransactionDecision");
                });

            modelBuilder.Entity("Blockchain.Models.Login", b =>
                {
                    b.HasOne("Blockchain.Models.BCUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blockchain.Models.Property", b =>
                {
                    b.HasOne("Blockchain.Models.BCFile", "BuildingDesign")
                        .WithMany()
                        .HasForeignKey("BuildingDesignBCFileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blockchain.Models.Seller", null)
                        .WithMany("Properties")
                        .HasForeignKey("SellerUserID");

                    b.Navigation("BuildingDesign");
                });

            modelBuilder.Entity("Blockchain.Models.LoanApplication", b =>
                {
                    b.HasOne("Blockchain.Models.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerUserID");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("Blockchain.Models.LoanDecision", b =>
                {
                    b.HasOne("Blockchain.Models.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerUserID");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("Blockchain.Models.PermitApplication", b =>
                {
                    b.HasOne("Blockchain.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Blockchain.Models.Seller", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
